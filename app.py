import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sqlite3
import hashlib
import os
import datetime
import time
import uuid
import re
from streamlit_chat import message

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="FeedSmart - Sistema de Feedback", layout="wide", page_icon="ü§ñ")

# ==================== ESTRUTURAS DE DADOS INTEGRADAS ====================

class FeedbackQueue:
    """
    Implementa√ß√£o de uma fila para gerenciar solicita√ß√µes de feedback.
    
    Esta estrutura de dados segue o princ√≠pio FIFO (First In, First Out),
    onde o primeiro feedback adicionado ser√° o primeiro a ser processado.
    """
    
    def __init__(self):
        """Inicializa uma fila vazia."""
        self.items = []
    
    def is_empty(self):
        """Verifica se a fila est√° vazia."""
        return len(self.items) == 0
    
    def enqueue(self, item):
        """Adiciona um item ao final da fila."""
        self.items.append(item)
    
    def dequeue(self):
        """Remove e retorna o item do in√≠cio da fila."""
        if self.is_empty():
            return None
        return self.items.pop(0)
    
    def peek(self):
        """Retorna o item do in√≠cio da fila sem remov√™-lo."""
        if self.is_empty():
            return None
        return self.items[0]
    
    def size(self):
        """Retorna o tamanho da fila."""
        return len(self.items)
    
    def clear(self):
        """Limpa a fila."""
        self.items = []
    
    def get_all(self):
        """Retorna todos os itens da fila sem remov√™-los."""
        return self.items.copy()
    
    def process_next(self):
        """
        Processa o pr√≥ximo feedback na fila baseado na prioridade.
        Remove e retorna o item com maior prioridade.
        """
        if self.is_empty():
            return None
        
        # Encontrar item com maior prioridade (maior n√∫mero = maior prioridade)
        max_priority_index = 0
        for i in range(1, len(self.items)):
            if self.items[i]['priority'] > self.items[max_priority_index]['priority']:
                max_priority_index = i
        
        # Remover e retornar o item de maior prioridade
        return self.items.pop(max_priority_index)
    
    def get_sorted_by_priority(self):
        """Retorna itens ordenados por prioridade (maior prioridade primeiro)."""
        return sorted(self.items, key=lambda x: x['priority'], reverse=True)

# ==================== ALGORITMOS DE ORDENA√á√ÉO INTEGRADOS ====================

def merge_sort_by_rating(arr):
    """
    Implementa√ß√£o do algoritmo Merge Sort para ordenar √≠ndices com base nos valores de avalia√ß√£o.
    Retorna uma lista de √≠ndices ordenados do maior para o menor valor.
    
    Complexidade: O(n log n)
    Tipo: Divis√£o e conquista
    Est√°vel: Sim
    
    Args:
        arr: Lista de valores de avalia√ß√£o
        
    Returns:
        Lista de √≠ndices ordenados (maior para menor)
    """
    # Criar lista de tuplas (valor, √≠ndice)
    indexed_arr = [(arr[i], i) for i in range(len(arr))]
    
    def merge_sort(arr):
        """Fun√ß√£o recursiva principal do merge sort."""
        if len(arr) <= 1:
            return arr
        
        # Dividir o array
        mid = len(arr) // 2
        left = merge_sort(arr[:mid])
        right = merge_sort(arr[mid:])
        
        # Conquistar (mesclar)
        return merge(left, right)
    
    def merge(left, right):
        """Fun√ß√£o para mesclar duas listas ordenadas."""
        result = []
        i = j = 0
        
        # Mesclar ordenando do maior para o menor (ordem decrescente)
        while i < len(left) and j < len(right):
            if left[i][0] >= right[j][0]:  # Comparar valores
                result.append(left[i])
                i += 1
            else:
                result.append(right[j])
                j += 1
        
        # Adicionar elementos restantes
        result.extend(left[i:])
        result.extend(right[j:])
        
        return result
    
    # Executar o merge sort
    sorted_arr = merge_sort(indexed_arr)
    
    # Extrair apenas os √≠ndices da lista ordenada
    return [item[1] for item in sorted_arr]

# ==================== BANCO DE DADOS ====================

def init_db():
    """Inicializa o banco de dados e cria as tabelas necess√°rias."""
    conn = sqlite3.connect('feedback_app.db')
    c = conn.cursor()
    
    # Criar tabela de usu√°rios se n√£o existir
    c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        username TEXT UNIQUE,
        password TEXT,
        name TEXT,
        email TEXT
    )
    ''')
    
    # Criar tabela de feedback se n√£o existir
    c.execute('''
    CREATE TABLE IF NOT EXISTS feedback (
        id TEXT PRIMARY KEY,
        user_id TEXT,
        rating REAL,
        comment TEXT,
        timestamp TEXT,
        priority INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )
    ''')
    
    # Sistema de migra√ß√£o: Verificar se a coluna priority existe
    try:
        c.execute("SELECT priority FROM feedback LIMIT 1")
    except sqlite3.OperationalError:
        # Coluna priority n√£o existe, vamos adicion√°-la
        c.execute("ALTER TABLE feedback ADD COLUMN priority INTEGER DEFAULT 0")
        print("‚úÖ Migra√ß√£o: Coluna 'priority' adicionada √† tabela feedback")
    
    # Criar √≠ndices para melhor performance
    try:
        c.execute("CREATE INDEX IF NOT EXISTS idx_feedback_user_id ON feedback(user_id)")
        c.execute("CREATE INDEX IF NOT EXISTS idx_feedback_timestamp ON feedback(timestamp)")
        c.execute("CREATE INDEX IF NOT EXISTS idx_feedback_priority ON feedback(priority)")
    except sqlite3.Error as e:
        print(f"Aviso: Erro ao criar √≠ndices: {e}")
    
    conn.commit()
    conn.close()

def hash_password(password):
    """Criptografa uma senha usando SHA-256."""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_login(username, password):
    """
    Verifica as credenciais de login do usu√°rio.
    
    Args:
        username (str): Nome de usu√°rio
        password (str): Senha em texto plano
        
    Returns:
        dict or None: Dados do usu√°rio se v√°lido, None se inv√°lido
    """
    conn = sqlite3.connect('feedback_app.db')
    c = conn.cursor()
    
    c.execute("SELECT id, password, name FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    
    if result and result[1] == hash_password(password):
        return {"id": result[0], "name": result[2], "username": username}
    return None

def register_user(username, password, name, email):
    """
    Registra um novo usu√°rio no sistema com valida√ß√£o completa.
    
    Args:
        username (str): Nome de usu√°rio √∫nico
        password (str): Senha em texto plano
        name (str): Nome completo
        email (str): Email do usu√°rio
        
    Returns:
        tuple: (success, message)
    """
    # Valida√ß√£o de email usando regex
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email):
        return False, "Email inv√°lido. Use o formato: exemplo@dominio.com"
    
    # Valida√ß√µes adicionais
    if not all([username, password, name, email]):
        return False, "Todos os campos s√£o obrigat√≥rios"
    
    if len(password) < 6:
        return False, "A senha deve ter pelo menos 6 caracteres"
    
    if len(username) < 3:
        return False, "O nome de usu√°rio deve ter pelo menos 3 caracteres"
    
    if len(name) < 2:
        return False, "O nome deve ter pelo menos 2 caracteres"
    
    # Conectar ao banco de dados
    conn = sqlite3.connect('feedback_app.db')
    c = conn.cursor()
    
    try:
        user_id = str(uuid.uuid4())
        c.execute(
            "INSERT INTO users (id, username, password, name, email) VALUES (?, ?, ?, ?, ?)",
            (user_id, username, hash_password(password), name, email)
        )
        conn.commit()
        conn.close()
        return True, "Usu√°rio registrado com sucesso!"
        
    except sqlite3.IntegrityError:
        conn.close()
        return False, "Nome de usu√°rio j√° existe. Escolha outro."
    except Exception as e:
        conn.close()
        return False, f"Erro inesperado: {str(e)}"

def save_feedback(user_id, rating, comment):
    """
    Salva um feedback no banco de dados e adiciona na fila de processamento.
    
    Args:
        user_id (str): ID do usu√°rio
        rating (float): Avalia√ß√£o m√©dia
        comment (str): Coment√°rio do feedback
        
    Returns:
        str: ID do feedback criado
    """
    conn = sqlite3.connect('feedback_app.db')
    c = conn.cursor()
    
    feedback_id = str(uuid.uuid4())
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Calcular prioridade baseada na avalia√ß√£o (avalia√ß√µes baixas = prioridade alta)
    priority = 6 - int(rating)  # Avalia√ß√£o 1 = prioridade 5, Avalia√ß√£o 5 = prioridade 1
    
    c.execute(
        "INSERT INTO feedback (id, user_id, rating, comment, timestamp, priority) VALUES (?, ?, ?, ?, ?, ?)",
        (feedback_id, user_id, rating, comment, timestamp, priority)
    )
    
    # Adicionar √† fila de processamento
    if 'feedback_queue' not in st.session_state:
        st.session_state.feedback_queue = FeedbackQueue()
    
    feedback_item = {
        'id': feedback_id,
        'user_id': user_id,
        'rating': rating,
        'comment': comment,
        'timestamp': timestamp,
        'priority': priority
    }
    st.session_state.feedback_queue.enqueue(feedback_item)
    
    conn.commit()
    conn.close()
    return feedback_id

def get_user_feedbacks(user_id, sort_method='timestamp'):
    """
    Obt√©m todos os feedbacks de um usu√°rio com op√ß√£o de ordena√ß√£o.
    
    Args:
        user_id (str): ID do usu√°rio
        sort_method (str): 'timestamp' ou 'rating'
        
    Returns:
        pandas.DataFrame: Feedbacks do usu√°rio
    """
    conn = sqlite3.connect('feedback_app.db')
    df = pd.read_sql_query(
        "SELECT * FROM feedback WHERE user_id = ? ORDER BY timestamp DESC", 
        conn, params=(user_id,)
    )
    conn.close()
    
    # Aplicar ordena√ß√£o por avalia√ß√£o usando Merge Sort se solicitado
    if len(df) > 0 and sort_method == 'rating':
        ratings = df['rating'].tolist()
        sorted_indices = merge_sort_by_rating(ratings)
        df = df.iloc[sorted_indices].reset_index(drop=True)
    
    return df

# ==================== CONFIGURA√á√ïES E CONSTANTES ====================

# Produtos dispon√≠veis
PRODUCTS = ["Camiseta", "Shorts", "Cal√ßa", "T√™nis"]

# Mapeamento de prioridades
PRIORITY_LABELS = {
    5: "üî¥ CR√çTICA",
    4: "üü† ALTA", 
    3: "üü° M√âDIA",
    2: "üîµ BAIXA",
    1: "üü¢ MUITO BAIXA"
}

# ==================== ESTADO DA SESS√ÉO ====================

# Inicializar o banco de dados
init_db()

# Inicializar estado da sess√£o
if 'user' not in st.session_state:
    st.session_state.user = None
if 'page' not in st.session_state:
    st.session_state.page = 'login'
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'current_feedback' not in st.session_state:
    st.session_state.current_feedback = {
        "stage": 0, 
        "product": None, 
        "product_rating": None, 
        "delivery_rating": None, 
        "comment": None
    }
if 'feedback_queue' not in st.session_state:
    st.session_state.feedback_queue = FeedbackQueue()

# ==================== FUN√á√ïES DE NAVEGA√á√ÉO ====================

def change_page(page):
    """Muda para uma p√°gina espec√≠fica."""
    st.session_state.page = page
    st.rerun()
    
def logout():
    """Realiza logout do usu√°rio limpando a sess√£o."""
    st.session_state.user = None
    st.session_state.page = 'login'
    st.session_state.chat_history = []
    st.session_state.current_feedback = {
        "stage": 0, 
        "product": None, 
        "product_rating": None, 
        "delivery_rating": None, 
        "comment": None
    }
    st.rerun()

def clear_chat_history():
    """Limpa o hist√≥rico do chat e reinicia a conversa."""
    st.session_state.chat_history = []
    st.session_state.current_feedback = {
        "stage": 0, 
        "product": None, 
        "product_rating": None, 
        "delivery_rating": None, 
        "comment": None
    }

# ==================== PROCESSAMENTO DO CHATBOT ====================

def process_chat_input(user_input):
    """
    Processa a entrada do usu√°rio no chatbot baseado no est√°gio atual.
    
    Args:
        user_input (str): Entrada do usu√°rio
    """
    feedback = st.session_state.current_feedback
    
    if feedback["stage"] == 0:
        # Iniciar conversa com boas-vindas
        welcome_msg = f"Ol√°, {st.session_state.user['name']}! üëã\n\nSou o assistente de feedback da nossa loja. Vou te ajudar a avaliar sua experi√™ncia de compra.\n\nQual produto voc√™ gostaria de avaliar?"
        st.session_state.chat_history.append({"role": "assistant", "content": welcome_msg})
        feedback["stage"] = 1
        
    elif feedback["stage"] == 1:
        # Processar sele√ß√£o de produto
        if user_input in PRODUCTS:
            feedback["product"] = user_input
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            st.session_state.chat_history.append({
                "role": "assistant", 
                "content": f"√ìtimo! Voc√™ escolheu: {user_input}\n\nEm uma escala de 0 a 5, como voc√™ avalia a qualidade deste produto?\n(0 = Muito ruim, 5 = Excelente)"
            })
            feedback["stage"] = 2
        else:
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            st.session_state.chat_history.append({
                "role": "assistant", 
                "content": "Por favor, selecione um dos produtos dispon√≠veis na lista."
            })
            
    elif feedback["stage"] == 2:
        # Processar avalia√ß√£o do produto
        try:
            rating = int(user_input)
            if 0 <= rating <= 5:
                feedback["product_rating"] = rating
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": f"Obrigado pela avalia√ß√£o de {rating}/5 para o produto!\n\nAgora, em uma escala de 0 a 5, como voc√™ avalia o prazo de entrega?\n(0 = Muito ruim, 5 = Excelente)"
                })
                feedback["stage"] = 3
            else:
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": "Por favor, forne√ßa uma avalia√ß√£o entre 0 e 5."
                })
        except ValueError:
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            st.session_state.chat_history.append({
                "role": "assistant", 
                "content": "Por favor, forne√ßa um n√∫mero entre 0 e 5 para sua avalia√ß√£o."
            })
            
    elif feedback["stage"] == 3:
        # Processar avalia√ß√£o do prazo de entrega
        try:
            rating = int(user_input)
            if 0 <= rating <= 5:
                feedback["delivery_rating"] = rating
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": f"Perfeito! Nota {rating}/5 para a entrega.\n\nPara finalizar, gostaria de deixar algum coment√°rio adicional sobre sua experi√™ncia?"
                })
                feedback["stage"] = 4
            else:
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": "Por favor, forne√ßa uma avalia√ß√£o entre 0 e 5."
                })
        except ValueError:
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            st.session_state.chat_history.append({
                "role": "assistant", 
                "content": "Por favor, forne√ßa um n√∫mero entre 0 e 5 para sua avalia√ß√£o."
            })
            
    elif feedback["stage"] == 4:
        # Processar coment√°rio
        feedback["comment"] = user_input if user_input else "Sem coment√°rios adicionais"
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        
        # Calcular m√©dia das avalia√ß√µes
        avg_rating = (feedback["product_rating"] + feedback["delivery_rating"]) / 2
        
        # Criar coment√°rio estruturado
        structured_comment = f"Produto: {feedback['product']} | Avalia√ß√£o do produto: {feedback['product_rating']}/5 | Avalia√ß√£o da entrega: {feedback['delivery_rating']}/5 | Coment√°rio: {feedback['comment']}"
        
        # Salvar feedback no banco de dados
        feedback_id = save_feedback(st.session_state.user["id"], avg_rating, structured_comment)
        
        # Mensagem de confirma√ß√£o
        confirmation_msg = f"‚úÖ Feedback salvo com sucesso!\n\nüìä Resumo:\n‚Ä¢ Produto: {feedback['product']}\n‚Ä¢ Avalia√ß√£o do produto: {feedback['product_rating']}/5\n‚Ä¢ Avalia√ß√£o da entrega: {feedback['delivery_rating']}/5\n‚Ä¢ M√©dia geral: {avg_rating:.1f}/5\n\nObrigado pelo seu feedback! üôè\n\nDeseja fornecer outro feedback? (sim/n√£o)"
        
        st.session_state.chat_history.append({"role": "assistant", "content": confirmation_msg})
        feedback["stage"] = 5
        
    elif feedback["stage"] == 5:
        # Verificar se o usu√°rio quer dar outro feedback
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        if user_input.lower() in ["sim", "s", "yes", "y"]:
            st.session_state.chat_history.append({
                "role": "assistant", 
                "content": "√ìtimo! Qual produto voc√™ gostaria de avaliar agora?"
            })
            st.session_state.current_feedback = {
                "stage": 1, 
                "product": None, 
                "product_rating": None, 
                "delivery_rating": None, 
                "comment": None
            }
        else:
            st.session_state.chat_history.append({
                "role": "assistant", 
                "content": "Obrigado por participar! üòä\n\nSe quiser ver seus feedbacks anteriores, acesse a se√ß√£o de **Dashboard**.\n\nPara ver a fila de processamento, acesse **Fila de Processamento**."
            })
            st.session_state.current_feedback = {
                "stage": 0, 
                "product": None, 
                "product_rating": None, 
                "delivery_rating": None, 
                "comment": None
            }

# ==================== P√ÅGINAS ====================

def login_page():
    """Renderiza a p√°gina de login e registro."""
    st.title("ü§ñ FeedSmart")
    st.subheader("Sistema Inteligente de Coleta de Feedback")
    
    tab1, tab2 = st.tabs(["Login", "Registrar"])
    
    with tab1:
        st.subheader("Fazer Login")
        with st.form("login_form"):
            username = st.text_input("Nome de usu√°rio")
            password = st.text_input("Senha", type="password")
            submit_button = st.form_submit_button("Entrar")
            
            if submit_button:
                if username and password:
                    user = verify_login(username, password)
                    if user:
                        st.session_state.user = user
                        st.session_state.page = 'home'
                        st.success("Login realizado com sucesso!")
                        st.rerun()
                    else:
                        st.error("Nome de usu√°rio ou senha incorretos")
                else:
                    st.error("Preencha todos os campos")
    
    with tab2:
        st.subheader("Criar Conta")
        with st.form("register_form"):
            new_username = st.text_input("Nome de usu√°rio", key="reg_username")
            new_password = st.text_input("Senha", type="password", key="reg_password")
            confirm_password = st.text_input("Confirmar senha", type="password")
            name = st.text_input("Nome completo")
            email = st.text_input("Email")
            register_button = st.form_submit_button("Registrar")
            
            if register_button:
                if new_password != confirm_password:
                    st.error("As senhas n√£o coincidem")
                else:
                    success, message = register_user(new_username, new_password, name, email)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)

def home_page():
    """Renderiza a p√°gina inicial com informa√ß√µes e estat√≠sticas."""
    st.title(f"Bem-vindo, {st.session_state.user['name']}! üëã")
    
    # Barra lateral com navega√ß√£o
    with st.sidebar:
        st.title("üß≠ Navega√ß√£o")
        if st.button("üè† P√°gina Inicial"):
            change_page('home')
        if st.button("ü§ñ Chatbot de Feedback"):
            change_page('chatbot')
        if st.button("üìä Dashboard"):
            change_page('dashboard')
        if st.button("üîÑ Fila de Processamento"):
            change_page('queue')
        
        st.divider()
        if st.button("üö™ Sair"):
            logout()
    
    st.markdown("""
    ### üéØ Sobre o FeedSmart
    
    Este √© um sistema inteligente de coleta de feedback que utiliza:
    - **Chatbot interativo** para uma experi√™ncia natural
    - **Algoritmos avan√ßados** para organiza√ß√£o eficiente
    - **Sistema de filas** com prioriza√ß√£o autom√°tica
    - **An√°lise visual** para insights valiosos
    """)
    
    st.subheader("üöÄ Funcionalidades Principais:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **ü§ñ Chatbot de Feedback**
        - Conversa natural e intuitiva
        - Avalia√ß√£o de produtos e entrega
        - Coleta de coment√°rios detalhados
        
        **üìä Dashboard Anal√≠tico**
        - Visualiza√ß√£o de todos os feedbacks
        - Gr√°ficos de evolu√ß√£o temporal
        - Ordena√ß√£o inteligente (Merge Sort)
        """)
    
    with col2:
        st.markdown("""
        **üîÑ Fila de Processamento**
        - Organiza√ß√£o autom√°tica por prioridade
        - Sistema FIFO (First In, First Out)
        - Controles de processamento
        
        **üîê Sistema Seguro**
        - Autentica√ß√£o criptografada
        - Dados pessoais protegidos
        - Sess√µes seguras
        """)
    
    # Estat√≠sticas r√°pidas
    st.subheader("üìà Suas Estat√≠sticas")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        queue_size = st.session_state.feedback_queue.size()
        st.metric("üîÑ Feedbacks na Fila", queue_size)
    
    with col2:
        feedbacks = get_user_feedbacks(st.session_state.user["id"])
        total_feedbacks = len(feedbacks)
        st.metric("üìù Total de Feedbacks", total_feedbacks)
    
    with col3:
        if total_feedbacks > 0:
            avg_rating = feedbacks['rating'].mean()
            st.metric("‚≠ê Avalia√ß√£o M√©dia", f"{avg_rating:.1f}/5")
        else:
            st.metric("‚≠ê Avalia√ß√£o M√©dia", "N/A")
    
    with col4:
        if total_feedbacks > 0:
            last_feedback = feedbacks.iloc[0]['timestamp']
            last_date = pd.to_datetime(last_feedback).strftime('%d/%m/%Y')
            st.metric("üìÖ √öltimo Feedback", last_date)
        else:
            st.metric("üìÖ √öltimo Feedback", "N/A")
    
    # Call to action
    if total_feedbacks == 0:
        st.info("üéØ **Comece agora!** Clique em 'Chatbot de Feedback' para registrar sua primeira avalia√ß√£o.")

def chatbot_page():
    """Renderiza a interface do chatbot para coleta de feedback."""
    st.title("ü§ñ Chatbot de Feedback")
    
    # Barra lateral com navega√ß√£o
    with st.sidebar:
        st.title("üß≠ Navega√ß√£o")
        if st.button("üè† P√°gina Inicial"):
            change_page('home')
        if st.button("ü§ñ Chatbot de Feedback"):
            change_page('chatbot')
        if st.button("üìä Dashboard"):
            change_page('dashboard')
        if st.button("üîÑ Fila de Processamento"):
            change_page('queue')
        
        st.divider()
        
        st.subheader("üõ†Ô∏è Controles")
        if st.button("üóëÔ∏è Limpar Hist√≥rico", help="Limpa todo o hist√≥rico da conversa"):
            clear_chat_history()
            st.success("Hist√≥rico limpo com sucesso!")
            st.rerun()
        
        st.divider()
        if st.button("üö™ Sair"):
            logout()
    
    # Iniciar conversa se for a primeira vez
    if len(st.session_state.chat_history) == 0:
        process_chat_input("")
    
    # Container para o hist√≥rico do chat
    chat_container = st.container()
    with chat_container:
        for i, chat in enumerate(st.session_state.chat_history):
            if chat["role"] == "user":
                message(chat["content"], is_user=True, key=f"msg_{i}")
            else:
                message(chat["content"], is_user=False, key=f"msg_{i}")
    
    # Interface de entrada baseada no est√°gio atual
    feedback = st.session_state.current_feedback
    
    if feedback["stage"] == 1:
        # Sele√ß√£o de produto
        st.subheader("Selecione o produto:")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            selected_product = st.selectbox(
                "Escolha o produto que voc√™ adquiriu:",
                [""] + PRODUCTS,
                key="product_select"
            )
        
        with col2:
            st.write("")  # Espa√ßamento
            if st.button("Enviar", key="send_product"):
                if selected_product:
                    process_chat_input(selected_product)
                    st.rerun()
                else:
                    st.warning("Por favor, selecione um produto.")
    
    elif feedback["stage"] in [2, 3]:
        # Avalia√ß√£o (produto ou entrega)
        stage_text = "produto" if feedback["stage"] == 2 else "entrega"
        st.subheader(f"Avalie a qualidade do {stage_text}:")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            rating = st.selectbox(
                f"Nota para {stage_text} (0-5):",
                [""] + list(range(6)),
                key=f"{stage_text}_rating_select"
            )
        
        with col2:
            st.write("")  # Espa√ßamento
            if st.button("Enviar", key=f"send_{stage_text}_rating"):
                if rating != "":
                    process_chat_input(str(rating))
                    st.rerun()
                else:
                    st.warning("Por favor, selecione uma avalia√ß√£o.")
    
    elif feedback["stage"] == 4:
        # Coment√°rio
        st.subheader("Coment√°rio adicional:")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            comment = st.text_area(
                "Deixe seu coment√°rio (opcional):",
                placeholder="Conte-nos mais sobre sua experi√™ncia...",
                key="comment_input",
                height=100
            )
        
        with col2:
            st.write("")  # Espa√ßamento
            st.write("")  # Mais espa√ßamento
            if st.button("Finalizar", key="send_comment"):
                process_chat_input(comment)
                st.rerun()
    
    elif feedback["stage"] == 5:
        # Confirma√ß√£o para novo feedback
        st.subheader("Deseja dar outro feedback?")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚úÖ Sim, novo feedback"):
                process_chat_input("sim")
                st.rerun()
        
        with col2:
            if st.button("üè† Voltar ao in√≠cio"):
                change_page('home')
    
    else:
        # Input de texto padr√£o para outros casos
        user_input = st.text_input("Digite sua mensagem:", key="user_input")
        
        if st.button("Enviar") and user_input:
            process_chat_input(user_input)
            st.rerun()

def dashboard_page():
    """Renderiza o dashboard anal√≠tico com m√©tricas e gr√°ficos."""
    st.title("üìä Dashboard Anal√≠tico")
    
    # Barra lateral com navega√ß√£o
    with st.sidebar:
        st.title("üß≠ Navega√ß√£o")
        if st.button("üè† P√°gina Inicial"):
            change_page('home')
        if st.button("ü§ñ Chatbot de Feedback"):
            change_page('chatbot')
        if st.button("üìä Dashboard"):
            change_page('dashboard')
        if st.button("üîÑ Fila de Processamento"):
            change_page('queue')
        
        st.divider()
        if st.button("üö™ Sair"):
            logout()
    
    # Op√ß√µes de ordena√ß√£o
    col1, col2 = st.columns([3, 1])
    with col1:
        st.subheader("Seus Feedbacks")
    with col2:
        sort_option = st.selectbox(
            "Ordenar por:",
            ["Data (mais recente)", "Avalia√ß√£o (maior para menor)"],
            key="sort_option"
        )
    
    sort_method = 'rating' if 'Avalia√ß√£o' in sort_option else 'timestamp'
    
    # Obter feedbacks do usu√°rio
    feedbacks = get_user_feedbacks(st.session_state.user["id"], sort_method)
    
    if len(feedbacks) == 0:
        st.info("üìù Voc√™ ainda n√£o tem feedbacks registrados.")
        st.write("V√° para o **Chatbot de Feedback** para registrar sua primeira avalia√ß√£o!")
        
        if st.button("ü§ñ Ir para Chatbot"):
            change_page('chatbot')
    else:
        # Calcular m√©tricas
        avg_rating = feedbacks['rating'].mean()
        max_rating = feedbacks['rating'].max()
        min_rating = feedbacks['rating'].min()
        total_feedbacks = len(feedbacks)
        
        # Exibir m√©tricas em cards
        st.subheader("üìà Estat√≠sticas Gerais")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üìà Avalia√ß√£o M√©dia",
                value=f"{avg_rating:.1f}/5",
                delta=f"{avg_rating - 3:.1f}" if avg_rating != 3 else None
            )
        
        with col2:
            st.metric(
                label="‚≠ê Maior Avalia√ß√£o",
                value=f"{max_rating:.1f}/5"
            )
        
        with col3:
            st.metric(
                label="üìâ Menor Avalia√ß√£o",
                value=f"{min_rating:.1f}/5"
            )
        
        with col4:
            st.metric(
                label="üìù Total de Feedbacks",
                value=total_feedbacks
            )
        
        st.divider()
        
        # Gr√°fico de evolu√ß√£o
        if len(feedbacks) > 1:
            st.subheader("üìà Evolu√ß√£o das Avalia√ß√µes")
            
            # Preparar dados para o gr√°fico
            feedbacks_sorted = feedbacks.copy()
            feedbacks_sorted['timestamp'] = pd.to_datetime(feedbacks_sorted['timestamp'])
            feedbacks_sorted = feedbacks_sorted.sort_values('timestamp')
            feedbacks_sorted['avg_rating_cumulative'] = feedbacks_sorted['rating'].expanding().mean()
            
            # Criar gr√°fico
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Linha principal
            ax.plot(
                range(len(feedbacks_sorted)), 
                feedbacks_sorted['avg_rating_cumulative'], 
                marker='o', 
                linewidth=2, 
                markersize=6, 
                color='#1f77b4',
                label='M√©dia Cumulativa'
            )
            
            # Linha de refer√™ncia (m√©dia geral)
            ax.axhline(
                y=avg_rating, 
                color='red', 
                linestyle='--', 
                alpha=0.7,
                label=f'M√©dia Geral ({avg_rating:.1f})'
            )
            
            # Configura√ß√µes do gr√°fico
            ax.set_xlabel('Feedback #')
            ax.set_ylabel('Avalia√ß√£o')
            ax.set_title('Evolu√ß√£o da M√©dia de Avalia√ß√µes ao Longo do Tempo')
            ax.grid(True, alpha=0.3)
            ax.legend()
            ax.set_ylim(0, 5.5)
            
            # Exibir gr√°fico
            st.pyplot(fig)
            
        else:
            # Gr√°fico de barras para feedback √∫nico
            st.subheader("üìä Sua Avalia√ß√£o")
            
            fig, ax = plt.subplots(figsize=(8, 6))
            
            categories = ['Sua Avalia√ß√£o', 'M√©dia Ideal']
            values = [feedbacks.iloc[0]['rating'], 5.0]
            colors = ['#1f77b4', '#90EE90']
            
            bars = ax.bar(categories, values, color=colors, alpha=0.7)
            
            # Adicionar valores nas barras
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                       f'{value:.1f}', ha='center', va='bottom', fontsize=12)
            
            ax.set_ylabel('Avalia√ß√£o')
            ax.set_title('Compara√ß√£o com Avalia√ß√£o Ideal')
            ax.set_ylim(0, 5.5)
            ax.grid(True, alpha=0.3, axis='y')
            
            st.pyplot(fig)
        
        st.divider()
        
        # Tabela de feedbacks
        st.subheader(f"üìã Hist√≥rico Detalhado (Ordenado por {sort_option})")
        
        # Preparar dados para exibi√ß√£o
        display_df = feedbacks.copy()
        display_df['timestamp'] = pd.to_datetime(display_df['timestamp']).dt.strftime('%d/%m/%Y %H:%M')
        display_df = display_df.rename(columns={
            'rating': 'Avalia√ß√£o',
            'comment': 'Coment√°rio',
            'timestamp': 'Data/Hora',
            'priority': 'Prioridade'
        })
        
        # Mapear prioridade para labels
        display_df['Prioridade'] = display_df['Prioridade'].map(PRIORITY_LABELS)
        
        # Exibir tabela
        st.dataframe(
            display_df[['Data/Hora', 'Avalia√ß√£o', 'Prioridade', 'Coment√°rio']],
            use_container_width=True,
            hide_index=True
        )

def queue_page():
    """Renderiza a p√°gina de gerenciamento da fila de processamento."""
    st.title("üîÑ Fila de Processamento")
    
    # Barra lateral com navega√ß√£o
    with st.sidebar:
        st.title("üß≠ Navega√ß√£o")
        if st.button("üè† P√°gina Inicial"):
            change_page('home')
        if st.button("ü§ñ Chatbot de Feedback"):
            change_page('chatbot')
        if st.button("üìä Dashboard"):
            change_page('dashboard')
        if st.button("üîÑ Fila de Processamento"):
            change_page('queue')
        
        st.divider()
        if st.button("üö™ Sair"):
            logout()
    
    st.write("Esta p√°gina mostra os feedbacks na fila de processamento, organizados por prioridade.")
    
    queue = st.session_state.feedback_queue
    
    # Informa√ß√µes da fila
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìä Itens na Fila", queue.size())
    
    with col2:
        next_item = queue.peek()
        if next_item:
            st.metric("‚è≠Ô∏è Pr√≥ximo", f"Avalia√ß√£o {next_item['rating']:.1f}/5")
        else:
            st.metric("‚è≠Ô∏è Pr√≥ximo", "Fila vazia")
    
    with col3:
        if queue.size() > 0:
            sorted_items = queue.get_sorted_by_priority()
            highest_priority = sorted_items[0]['priority']
            st.metric("üö® Maior Prioridade", PRIORITY_LABELS.get(highest_priority, "N/A"))
        else:
            st.metric("üö® Maior Prioridade", "N/A")
    
    st.divider()
    
    # Controles da fila
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚ö° Processar Pr√≥ximo", disabled=queue.is_empty()):
            processed = queue.process_next()
            if processed:
                st.success(f"‚úÖ Feedback processado: Avalia√ß√£o {processed['rating']:.1f}/5")
                st.rerun()
    
    with col2:
        if st.button("üóëÔ∏è Limpar Fila", disabled=queue.is_empty()):
            queue.clear()
            st.success("üßπ Fila limpa com sucesso!")
            st.rerun()
    
    st.divider()
    
    # Exibir itens da fila
    if queue.size() > 0:
        st.subheader("üìã Itens na Fila (Ordenados por Prioridade)")
        
        # Obter itens ordenados por prioridade
        sorted_items = queue.get_sorted_by_priority()
        
        # Criar DataFrame para exibi√ß√£o
        queue_data = []
        for item in sorted_items:
            # Converter timestamp para formato leg√≠vel
            timestamp = datetime.datetime.strptime(item['timestamp'], "%Y-%m-%d %H:%M:%S")
            formatted_time = timestamp.strftime("%d/%m/%Y %H:%M")
            
            queue_data.append({
                "Data/Hora": formatted_time,
                "Avalia√ß√£o": f"{item['rating']:.1f}/5",
                "Prioridade": PRIORITY_LABELS.get(item['priority'], "N/A"),
                "Coment√°rio": item['comment'][:50] + "..." if len(item['comment']) > 50 else item['comment']
            })
        
        # Exibir tabela
        queue_df = pd.DataFrame(queue_data)
        st.dataframe(
            queue_df,
            use_container_width=True,
            hide_index=True
        )
        
        # Estat√≠sticas da fila
        st.subheader("üìä Estat√≠sticas da Fila")
        
        # Contar por prioridade
        priority_counts = {}
        for item in sorted_items:
            priority = item['priority']
            priority_counts[priority] = priority_counts.get(priority, 0) + 1
        
        # Exibir contadores
        cols = st.columns(5)
        for i, (priority, label) in enumerate(PRIORITY_LABELS.items()):
            with cols[i]:
                count = priority_counts.get(priority, 0)
                st.metric(label, count)
    
    else:
        # Fila vazia
        st.info("üì≠ A fila de processamento est√° vazia.")
        st.write("Novos feedbacks aparecer√£o aqui automaticamente quando forem registrados no chatbot.")
        
        if st.button("ü§ñ Ir para Chatbot"):
            change_page('chatbot')

# ==================== RENDERIZA√á√ÉO PRINCIPAL ====================

def main():
    """Fun√ß√£o principal que controla o fluxo da aplica√ß√£o."""
    # Verificar autentica√ß√£o
    if st.session_state.user is None:
        login_page()
    else:
        # Renderizar p√°gina atual
        if st.session_state.page == 'home':
            home_page()
        elif st.session_state.page == 'chatbot':
            chatbot_page()
        elif st.session_state.page == 'dashboard':
            dashboard_page()
        elif st.session_state.page == 'queue':
            queue_page()
        else:
            # P√°gina padr√£o
            home_page()

# Executar aplica√ß√£o
if __name__ == "__main__":
    main()
